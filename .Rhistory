)
library(scPagwas)
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation_hg37,# gene position in chromosome is provided by package. default is hg38, block_annotation_hg37 is hg37.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
iters_singlecell = 10,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
##------ Tue Apr 23 13:53:44 2024 ------##
##------ Tue Apr 23 13:53:48 2024 ------##
names(Pagwas)
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
min.pathway.size = 10
max.pathway.size = 1000
if (is.null(Pathway_list)) {
stop("not loaded Pathway_list data")
}
if (!("list" %in% class(Pathway_list))) {
stop("not loaded the list format of Pathway_list data")
}
Pa.len <- unlist(lapply(Pathway_list, function(Pa) length(Pa)))
Pathway_list <- Pathway_list[names(Pathway_list)[Pa.len >= min.pathway.size &
Pa.len <= max.pathway.size]]
pa_gene <- unique(unlist(Pathway_list))
if (length(intersect(rownames(Pagwas$data_mat), pa_gene)) < length(pa_gene) * 0.1) {
stop("There are less 10% intersect genes between Single_data and
Pathway_list, please check the gene names")
}
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa,
Pagwas$VariableFeatures
))
}
)) > 2
)]
Pathway_list <- Pathway_list[pana]
# keep the raw pathway
Pagwas$rawPathway_list <- Pathway_list
celltypes <- as.vector(unique(Pagwas$Celltype_anno$annotation))
pana_list <- lapply(celltypes, function(celltype) {
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
if (!inherits(scCounts, "matrix")) {
scCounts <- as_matrix(scCounts)
}
scCounts <- scCounts[rowSums(scCounts) != 0, ]
proper.gene.names <- rownames(scCounts)
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa, proper.gene.names
))
}
)) > 2
)]
return(pana)
})
Pagwas$Pathway_list <- Pathway_list[Reduce(intersect, pana_list)]
Pagwas$rawPathway_list <- Pathway_list[Reduce(intersect, pana_list)]
rm(pana_list)
rm(Pathway_list)
message("* Start to get Pathway SVD socre!")
pb <- txtProgressBar(style = 3)
scPCAscore_list <- lapply(celltypes, function(celltype) {
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
if (!inherits(scCounts, "matrix")) {
scCounts <- as_matrix(scCounts)
}
scPCAscore <- PathwayPCAtest(
Pathway_list = Pagwas$Pathway_list,
scCounts = scCounts
)
setTxtProgressBar(pb, which(celltypes == celltype) / length(celltypes))
print(celltype)
return(scPCAscore)
})
PathwayPCAtest <- function(Pathway_list,
scCounts) {
if (any(duplicated(rownames(scCounts)))) {
stop("Duplicate gene names are not allowed - please reduce")
}
if (any(duplicated(colnames(scCounts)))) {
stop("Duplicate cell names are not allowed - please reduce")
}
if (any(is.na(rownames(scCounts)))) {
stop("NA gene names are not allowed - please fix")
}
if (any(is.na(colnames(scCounts)))) {
stop("NA cell names are not allowed - please fix")
}
## filter pathway
nPcs <- 1
scCounts <- t(scCounts)
cm <- Matrix::colMeans(scCounts)
proper.gene.names <- colnames(scCounts)
###### calculate the pca for each pathway terms.
papca <- lapply(Pathway_list, function(Pa_id) {
#print(id)
#Pa_id<-Pathway_list[[id]]
lab <- proper.gene.names %in% intersect(proper.gene.names, Pa_id)
mat <- scCounts[, lab]
result <- tryCatch(
{
pcs <- irlba::irlba(methods::as(mat, "dgCMatrix"),
nv = nPcs, nu = 0, center = cm[lab]
)
pcs$d <- pcs$d / sqrt(nrow(mat))
pcs$rotation <- pcs$v
pcs$v <- NULL
pcs$scores <- Matrix::crossprod(
pcs$rotation,
t(mat)
) - as.numeric((cm[lab] %*% pcs$rotation))
cs <- unlist(lapply(
seq_len(nrow(pcs$scores)),
function(i) {
sign(stats::cor(
pcs$scores[i, ],
colMeans(t(mat) * abs(pcs$rotation[, i]))
))
}
))
pcs$scores <- pcs$scores * cs
pcs$rotation <- pcs$rotation * cs
rownames(pcs$rotation) <- colnames(mat)
return(list(xp = pcs))
},
error = function(e) {
return(NULL)
}
)
})
pa_remove<-names(papca)[sapply(papca,is.null)]
papca<-papca[!sapply(papca,is.null)]
vdf <- data.frame(do.call(rbind, lapply(seq_along(papca), function(i) {
result <- tryCatch(
{
vars <- as.numeric((papca[[i]]$xp$d))
cbind(
i = i, var = vars, n = papca[[i]]$n,
npc = seq(seq_len(ncol(papca[[i]]$xp$rotation)))
)
},
error = function(e) {
return(NULL)
}
)
})))
vscore <- data.frame(do.call(rbind, lapply(seq_along(papca), function(i) {
papca[[i]]$xp$scores
})))
n.cells <- nrow(scCounts)
vdf$exp <- RMTstat::qWishartMax(0.5, n.cells, vdf$n,
var = 1, lower.tail = FALSE
)
vdf$var <- (vdf$var) / (vdf$exp)
df <- data.frame(
name = names(papca)[vdf$i],
score = vdf$var,
stringsAsFactors = FALSE
)
rownames(vscore) <- names(papca)[vdf$i]
colnames(vscore) <- rownames(scCounts)
return(list(df, vscore,pa_remove))
}
pana_list <- lapply(celltypes, function(celltype) {
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
if (!inherits(scCounts, "matrix")) {
scCounts <- as_matrix(scCounts)
}
scCounts <- scCounts[rowSums(scCounts) != 0, ]
proper.gene.names <- rownames(scCounts)
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa, proper.gene.names
))
}
)) > 2
)]
return(pana)
})
Pathway_list=Genes_by_pathway_kegg
pana_list <- lapply(celltypes, function(celltype) {
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
if (!inherits(scCounts, "matrix")) {
scCounts <- as_matrix(scCounts)
}
scCounts <- scCounts[rowSums(scCounts) != 0, ]
proper.gene.names <- rownames(scCounts)
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa, proper.gene.names
))
}
)) > 2
)]
return(pana)
})
Pagwas$Pathway_list <- Pathway_list[Reduce(intersect, pana_list)]
Pagwas$rawPathway_list <- Pathway_list[Reduce(intersect, pana_list)]
rm(pana_list)
rm(Pathway_list)
message("* Start to get Pathway SVD socre!")
pb <- txtProgressBar(style = 3)
scPCAscore_list <- lapply(celltypes, function(celltype) {
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
if (!inherits(scCounts, "matrix")) {
scCounts <- as_matrix(scCounts)
}
scPCAscore <- PathwayPCAtest(
Pathway_list = Pagwas$Pathway_list,
scCounts = scCounts
)
setTxtProgressBar(pb, which(celltypes == celltype) / length(celltypes))
print(celltype)
return(scPCAscore)
})
min.pathway.size = 10
celltypes
celltype<-celltypes[1]
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
if (!inherits(scCounts, "matrix")) {
scCounts <- as_matrix(scCounts)
}
scCounts
scCounts <- scCounts[rowSums(scCounts) != 0, ]
proper.gene.names <- rownames(scCounts)
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa, proper.gene.names
))
}
)) > 2
)]
Pathway_list=Genes_by_pathway_kegg
if (is.null(Pathway_list)) {
stop("not loaded Pathway_list data")
}
if (!("list" %in% class(Pathway_list))) {
stop("not loaded the list format of Pathway_list data")
}
# filter the pathway length
Pa.len <- unlist(lapply(Pathway_list, function(Pa) length(Pa)))
Pathway_list <- Pathway_list[names(Pathway_list)[Pa.len >= min.pathway.size &
Pa.len <= max.pathway.size]]
# Valid the total genes of pathway.
pa_gene <- unique(unlist(Pathway_list))
if (length(intersect(rownames(Pagwas$data_mat), pa_gene)) < length(pa_gene) * 0.1) {
stop("There are less 10% intersect genes between Single_data and
Pathway_list, please check the gene names")
}
# filter the scarce pathway
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa,
Pagwas$VariableFeatures
))
}
)) > 2
)]
Pathway_list <- Pathway_list[pana]
# keep the raw pathway
Pagwas$rawPathway_list <- Pathway_list
# filter the gene for no expression in single cells in pathway
celltypes <- as.vector(unique(Pagwas$Celltype_anno$annotation))
Pathway_list
celltype
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
if (!inherits(scCounts, "matrix")) {
scCounts <- as_matrix(scCounts)
}
scCounts <- scCounts[rowSums(scCounts) != 0, ]
proper.gene.names <- rownames(scCounts)
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa, proper.gene.names
))
}
)) > 2
)]
return(pana)
celltypes
celltype
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
if (!inherits(scCounts, "matrix")) {
scCounts <- as_matrix(scCounts)
}
scCounts
scCounts <- scCounts[rowSums(scCounts) != 0, ]
proper.gene.names <- rownames(scCounts)
pana_list <- lapply(celltypes, function(celltype) {
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
if (!inherits(scCounts, "matrix")) {
scCounts <- as_matrix(scCounts)
}
scCounts <- scCounts[rowSums(scCounts) != 0, ]
proper.gene.names <- rownames(scCounts)
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa, proper.gene.names
))
}
)) > 2
)]
return(pana)
})
Pathway_list
Pagwas$Pathway_list <- Pathway_list[Reduce(intersect, pana_list)]
Pagwas$rawPathway_list <- Pathway_list[Reduce(intersect, pana_list)]
celltype
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
if (!inherits(scCounts, "matrix")) {
scCounts <- as_matrix(scCounts)
}
scPCAscore <- PathwayPCAtest(
Pathway_list = Pagwas$Pathway_list,
scCounts = scCounts
)
Pathway_list = Pagwas$Pathway_list
nPcs <- 1
scCounts <- t(scCounts)
cm <- Matrix::colMeans(scCounts)
proper.gene.names <- colnames(scCounts)
###### calculate the pca for each pathway terms.
papca <- lapply(Pathway_list, function(Pa_id) {
#print(id)
#Pa_id<-Pathway_list[[id]]
lab <- proper.gene.names %in% intersect(proper.gene.names, Pa_id)
mat <- scCounts[, lab]
result <- tryCatch(
{
pcs <- irlba::irlba(methods::as(mat, "dgCMatrix"),
nv = nPcs, nu = 0, center = cm[lab]
)
pcs$d <- pcs$d / sqrt(nrow(mat))
pcs$rotation <- pcs$v
pcs$v <- NULL
pcs$scores <- Matrix::crossprod(
pcs$rotation,
t(mat)
) - as.numeric((cm[lab] %*% pcs$rotation))
cs <- unlist(lapply(
seq_len(nrow(pcs$scores)),
function(i) {
sign(stats::cor(
pcs$scores[i, ],
colMeans(t(mat) * abs(pcs$rotation[, i]))
))
}
))
pcs$scores <- pcs$scores * cs
pcs$rotation <- pcs$rotation * cs
rownames(pcs$rotation) <- colnames(mat)
return(list(xp = pcs))
},
error = function(e) {
return(NULL)
}
)
})
papca
Pa_id
Pathway_list
Pa_id<-Pathway_list[[1]]
Pa_id
lab <- proper.gene.names %in% intersect(proper.gene.names, Pa_id)
mat <- scCounts[, lab]
mat
pcs <- irlba::irlba(methods::as(mat, "dgCMatrix"),
nv = nPcs, nu = 0, center = cm[lab]
)
methods::as(mat, "dgCMatrix")
pcs <- irlba::irlba(methods::as(mat, "dgCMatrix"),
nv = nPcs, nu = 0, center = cm[lab]
)
?irlba
mat
pcs <- irlba::irlba(mat,
nv = nPcs, nu = 0, center = cm[lab]
)
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation_hg37,# gene position in chromosome is provided by package. default is hg38, block_annotation_hg37 is hg37.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
iters_singlecell = 10,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
##------ Tue Apr 23 14:21:19 2024 ------##
##------ Tue Apr 23 14:21:22 2024 ------##
library(scPagwas)
renv::status()
renv::snapshot()
install.packages("rhdf5")
BiocManager::install("rhdf5")
renv::snapshot()
library(scPagwas)
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation_hg37,# gene position in chromosome is provided by package. default is hg38, block_annotation_hg37 is hg37.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
iters_singlecell = 10,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
##------ Tue Apr 23 14:42:39 2024 ------##
##------ Tue Apr 23 14:42:42 2024 ------##
##------ Tue Apr 23 14:42:49 2024 ------##
##------ Tue Apr 23 14:42:49 2024 ------##
##------ Tue Apr 23 14:42:49 2024 ------##
##------ Tue Apr 23 14:42:50 2024 ------##
##------ Tue Apr 23 14:43:03 2024 ------##
##------ Tue Apr 23 14:43:03 2024 ------##
##------ Tue Apr 23 14:43:04 2024 ------##
