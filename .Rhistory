vdf$exp <- RMTstat::qWishartMax(0.5, n.cells, vdf$n,
var = 1, lower.tail = FALSE
)
vdf$var <- (vdf$var) / (vdf$exp)
df <- data.frame(
name = names(papca)[vdf$i],
score = vdf$var,
stringsAsFactors = FALSE
)
vdf$exp <- RMTstat::qWishartMax(0.5, n.cells, vdf$n,
var = 1, lower.tail = FALSE
)
vdf$var <- (vdf$var) / (vdf$exp)
df <- data.frame(
name = names(papca)[vdf$i],
score = vdf$var,
stringsAsFactors = FALSE
)
names(papca)[vdf$i]
names(papca)
papca
vdf <- data.frame(do.call(rbind, lapply(seq_along(papca), function(i) {
result <- tryCatch(
{
vars <- as.numeric((papca[[i]]$xp$d))
cbind(
i = i, var = vars, n = papca[[i]]$n,
npc = seq(seq_len(ncol(papca[[i]]$xp$rotation)))
)
},
error = function(e) {
return(NULL)
}
)
})))
length(papca)
dim(vdf)
seq_along(papca)
vscore <- data.frame(do.call(rbind, lapply(seq_along(papca), function(i) {
tryCatch(
{
return(papca[[i]]$xp$scores)
},
error = function(e) {
return(NULL)
}
)
})))
dim(vscore)
n.cells <- nrow(scCounts)
vscore
vdf
!is.null(papca)
lapply(papca,function(x) !is.null(x))
papca<-papca[unlist(lapply(papca,function(x) !is.null(x)))]
papca
vdf <- data.frame(do.call(rbind, lapply(seq_along(papca), function(i) {
result <- tryCatch(
{
vars <- as.numeric((papca[[i]]$xp$d))
cbind(
i = i, var = vars, n = papca[[i]]$n,
npc = seq(seq_len(ncol(papca[[i]]$xp$rotation)))
)
},
error = function(e) {
return(NULL)
}
)
})))
dim(vdf)
vscore <- data.frame(do.call(rbind, lapply(seq_along(papca), function(i) {
papca[[i]]$xp$scores
})))
dim(vscore)
n.cells <- nrow(scCounts)
vdf$exp <- RMTstat::qWishartMax(0.5, n.cells, vdf$n,
var = 1, lower.tail = FALSE
)
vdf$var <- (vdf$var) / (vdf$exp)
df <- data.frame(
name = names(papca)[vdf$i],
score = vdf$var,
stringsAsFactors = FALSE
)
vdf$exp <- RMTstat::qWishartMax(0.5, n.cells, vdf$n,
var = 1, lower.tail = FALSE
)
vdf$var <- (vdf$var) / (vdf$exp)
head(vdf)
names(papca)
papca <- lapply(Pathway_list, function(Pa_id) {
lab <- proper.gene.names %in% intersect(proper.gene.names, Pa_id)
print(id)
mat <- scCounts[, lab]
if(all(colSums(mat)==0)){
return(NULL)
}else{
pcs <- irlba::irlba(methods::as(mat, "dgCMatrix"),
nv = nPcs, nu = 0, center = cm[lab]
)
pcs$d <- pcs$d / sqrt(nrow(mat))
pcs$rotation <- pcs$v
pcs$v <- NULL
pcs$scores <- Matrix::crossprod(
pcs$rotation,
t(mat)
) - as.numeric((cm[lab] %*% pcs$rotation))
cs <- unlist(lapply(
seq_len(nrow(pcs$scores)),
function(i) {
sign(stats::cor(
pcs$scores[i, ],
colMeans(t(mat) * abs(pcs$rotation[, i]))
))
}
))
pcs$scores <- pcs$scores * cs
pcs$rotation <- pcs$rotation * cs
rownames(pcs$rotation) <- colnames(mat)
return(list(xp = pcs))
}
})
papca <- lapply(Pathway_list, function(Pa_id) {
lab <- proper.gene.names %in% intersect(proper.gene.names, Pa_id)
#print(id)
mat <- scCounts[, lab]
if(all(colSums(mat)==0)){
return(NULL)
}else{
pcs <- irlba::irlba(methods::as(mat, "dgCMatrix"),
nv = nPcs, nu = 0, center = cm[lab]
)
pcs$d <- pcs$d / sqrt(nrow(mat))
pcs$rotation <- pcs$v
pcs$v <- NULL
pcs$scores <- Matrix::crossprod(
pcs$rotation,
t(mat)
) - as.numeric((cm[lab] %*% pcs$rotation))
cs <- unlist(lapply(
seq_len(nrow(pcs$scores)),
function(i) {
sign(stats::cor(
pcs$scores[i, ],
colMeans(t(mat) * abs(pcs$rotation[, i]))
))
}
))
pcs$scores <- pcs$scores * cs
pcs$rotation <- pcs$rotation * cs
rownames(pcs$rotation) <- colnames(mat)
return(list(xp = pcs))
}
})
papca<-papca[unlist(lapply(papca,function(x) !is.null(x)))]
vdf <- data.frame(do.call(rbind, lapply(seq_along(papca), function(i) {
result <- tryCatch(
{
vars <- as.numeric((papca[[i]]$xp$d))
cbind(
i = i, var = vars, n = papca[[i]]$n,
npc = seq(seq_len(ncol(papca[[i]]$xp$rotation)))
)
},
error = function(e) {
return(NULL)
}
)
})))
vscore <- data.frame(do.call(rbind, lapply(seq_along(papca), function(i) {
papca[[i]]$xp$scores
})))
n.cells <- nrow(scCounts)
vdf$exp <- RMTstat::qWishartMax(0.5, n.cells, vdf$n,
var = 1, lower.tail = FALSE
)
vdf$var <- (vdf$var) / (vdf$exp)
names(papca)[vdf$i]
df <- data.frame(
name = names(papca)[vdf$i],
score = vdf$var,
stringsAsFactors = FALSE
)
head(df)
rownames(vscore) <- names(papca)[vdf$i]
colnames(vscore) <- rownames(scCounts)
devtools::load_all(".")
celltypes
pb <- txtProgressBar(style = 3)
scPCAscore_list <- lapply(celltypes, function(celltype) {
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
#
scPCAscore <- PathwayPCAtest(
Pathway_list = Pagwas$Pathway_list,
scCounts =  as_matrix(scCounts)
)
setTxtProgressBar(pb, which(celltypes == celltype) / length(celltypes))
print(celltype)
return(scPCAscore)
})
close(pb)
devtools::load_all(".")
pb <- txtProgressBar(style = 3)
scPCAscore_list <- lapply(celltypes, function(celltype) {
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
#
scPCAscore <- PathwayPCAtest(
Pathway_list = Pagwas$Pathway_list,
scCounts =  as_matrix(scCounts)
)
setTxtProgressBar(pb, which(celltypes == celltype) / length(celltypes))
print(celltype)
return(scPCAscore)
})
close(pb)
scPCAscore_list[[1]][[1]]
pca_df <- reshape::merge_all(lapply(
seq_len(length(scPCAscore_list)), function(i) {
df <- scPCAscore_list[[i]][[1]]
df$celltype <- rep(celltypes[i], nrow(df))
return(df)
}
))
dim(pca_df)
head(pca_df)
pca_df <- lapply(seq_len(length(scPCAscore_list)), function(i) {
df <- scPCAscore_list[[i]][[1]]
df$celltype <- rep(celltypes[i], nrow(df))
return(df)
})
dim(pca_df)
i<-1
scPCAscore_list[[i]][[1]]
df <- scPCAscore_list[[i]][[1]]
head(df)
Pa_names <- unique(unlist(lapply(
seq_len(length(scPCAscore_list)), function(i) {
df <- scPCAscore_list[[i]][[1]]
return(df$name)
}
)))
Pa_names
Pa_names <-lapply(
seq_len(length(scPCAscore_list)), function(i) {
df <- scPCAscore_list[[i]][[1]]
return(df$name)
}
)
Pa_names <- Reduce(intersect, Pa_names)
Pa_names
length(Pa_names)
length(scPCAscore_list)
df <- scPCAscore_list[[i]][[1]]
head(df)
pca_df <- lapply(seq_len(length(scPCAscore_list)), function(i) {
df <- scPCAscore_list[[i]][[1]]
rownames(df)<-df$name
df<-df[Pa_names,]
df$celltype <- rep(celltypes[i], nrow(df))
return(df)
})
pca_df <- Reduce(function(dtf1, dtf2) rbind(dtf1, dtf2), pca_df)
pca_scoremat <- reshape2::dcast(
pca_df[, c("name", "celltype", "score")], name ~ celltype
)
dim(pca_scoremat)
rownames(pca_scoremat) <- pca_scoremat$name
if (dim(pca_scoremat)[2] == 2) {
pca_cell_df <- data.matrix(pca_scoremat[, -1])
} else {
pca_cell_df <- pca_scoremat[, -1]
}
rownames(pca_cell_df) <- pca_scoremat$name
colnames(pca_cell_df) <- colnames(pca_scoremat)[-1]
index <- !is.na(pca_cell_df[1, ])
if (sum(index) < ncol(pca_cell_df)) {
message(colnames(pca_cell_df)[!index], " have no information, delete!")
pca_cell_df <- pca_cell_df[, index]
}
scPCAscore_list[[i]][[2]]
dim(scPCAscore_list[[i]][[2]])
pca_scCell_mat <- bigreadr::cbind_df(lapply(seq_len(length(scPCAscore_list)), function(i) {
scPCAscore_list[[i]][[2]][Pa_names,]
}))
rm(scPCAscore_list)
colnames(pca_scCell_mat) <- colnames(Pagwas$data_mat)
options(bigmemory.allow.dimnames = TRUE)
Pagwas$pca_scCell_mat <- data.matrix(pca_scCell_mat)
colnames(Pagwas$merge_scexpr) <- colnames(pca_cell_df)
Pagwas$VariableFeatures <- intersect(
rownames(Pagwas$data_mat),
Pagwas$VariableFeatures
)
Pagwas$rawPathway_list[Pa_names]
devtools::load_all(".")
library(scPagwas)
library(scPagwas)
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
##------ Wed Jan  4 11:34:29 2023 ------##
##------ Wed Jan  4 11:34:34 2023 ------##
##------ Wed Jan  4 11:34:47 2023 ------##
##------ Wed Jan  4 11:34:47 2023 ------##
##------ Wed Jan  4 11:34:47 2023 ------##
##------ Wed Jan  4 11:34:48 2023 ------##
##------ Wed Jan  4 11:37:06 2023 ------##
##------ Wed Jan  4 11:37:08 2023 ------##
##------ Wed Jan  4 11:37:13 2023 ------##
if (!dir.exists(output.dirs)) {
dir.create(output.dirs)
}
Pagwas =NULL
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas")
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas")
output.prefix="Test"
output.dirs="Test"
Pathway_list=Genes_by_pathway_kegg
assay="RNA"
singlecell=T
celltype=F
block_annotation = block_annotation
chrom_ld = chrom_ld
assay = "RNA"
run_split=FALSE
n.cores=1
marg = 10000
maf_filter = 0.01
min_clustercells = 10
min.pathway.size = 5
max.pathway.size = 300
iters = 200
n_topgenes = 1000
seurat_return = TRUE
remove_outlier = TRUE
Single_data <- readRDS(Single_data)
Pagwas <- Single_data_input(
Pagwas = Pagwas,
assay = assay,
# nfeatures =nfeatures,
Single_data = Single_data,
Pathway_list = Pathway_list,
min_clustercells = min_clustercells
)
}
r_n <- colnames(Pagwas$data_mat)
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
suppressMessages(gwas_data <- bigreadr::fread2(gwas_data))
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = maf_filter
)
Pagwas$snp_gene_df <- SnpToGene(
gwas_data = Pagwas$gwas_data,
block_annotation = block_annotation,
marg = marg
)
Pagwas <- Pathway_annotation_input(
Pagwas = Pagwas,
block_annotation = block_annotation
)
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=n.cores
)
output.dirs
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=n.cores
)
unlink(paste0(backingpath,".bk"),recursive = TRUE)
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=n.cores
)
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=n.cores
)
getwd()
setwd("D:\OneDrive\RPakage\scPagwas\vignettes")
setwd("D:/OneDrive/RPakage/scPagwas/vignettes")
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=n.cores
)
Pagwas$lm_results <- Pagwas_perform_regression(
Pathway_ld_gwas_data = Pagwas$Pathway_ld_gwas_data
)
Pagwas <- scPagwas_perform_score(
Pagwas = Pagwas,
remove_outlier = TRUE
)
Pathway_sclm_results <- Pagwas$Pathway_sclm_results
dim(Pathway_sclm_results)
pathway_expr <- lapply(Pathway_names, function(pa) {
a <- intersect(Pagwas$Pathway_list[[pa]], rownames(Pagwas$data_mat))
if (length(a) == 0) {
return(NULL)
} else if (length(a) == 1) {
return(Pagwas$data_mat[a, ])
} else {
b <- biganalytics::apply(Pagwas$data_mat[a, ], 2, mean)
return(b)
}
})
Pathway_names <- colnames(Pathway_sclm_results)
pathway_expr <- lapply(Pathway_names, function(pa) {
a <- intersect(Pagwas$Pathway_list[[pa]], rownames(Pagwas$data_mat))
if (length(a) == 0) {
return(NULL)
} else if (length(a) == 1) {
return(Pagwas$data_mat[a, ])
} else {
b <- biganalytics::apply(Pagwas$data_mat[a, ], 2, mean)
return(b)
}
})
a<-!sapply(pathway_expr, is.null)
pathway_expr <- data.matrix(as.data.frame(pathway_expr[a]))
Pathway_names <- Pathway_names[a]
colnames(pathway_expr) <- Pathway_names
pa_exp_mat <- t(Pagwas$pca_scCell_mat[Pathway_names, ]) * pathway_expr
dim(pa_exp_mat)
class(pa_exp_mat)
class(Pathway_sclm_results)
Pagwas$Pathway_single_results <- Pathway_sclm_results[, Pathway_names] * pa_exp_mat
dim( Pathway_sclm_results[, Pathway_names] )
dim(pa_exp_mat)
rownames(Pagwas$Pathway_single_results) <- colnames(Pagwas$pca_scCell_mat)
message("* Get Pathways'rankPvalue for each celltypes!")
cl <- unique((Pagwas$Celltype_anno$annotation))
library("scPagwas")
library("Seurat")
library("scRNAseq")
library("scPagwas")
library("Seurat")
library("stringr")
scRNA_Healthy_Hema<-readRDS("E:/OneDrive/SingleCell/data/PBMCscATAC-seq/scRNA-Healthy-Hematopoiesis-191120.rds")
scRNA_Healthy_Hema<-readRDS("D:/OneDrive/SingleCell/data/PBMCscATAC-seq/scRNA-Healthy-Hematopoiesis-191120.rds")
?read.csv
?CreateSeuratObject
library(Seurat)
?CreateSeuratObject
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
$stdout
loadNamespace(i, c(lib.loc, .libPaths()), versionCheck = vI[[i]])
install.packages('restful')
library(scPagwas)
pkgdown::build_site()
install.packages("D:/R/temp/restfulr_0.0.15.tar.gz", repos = NULL, type = "source")
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library("rtracklayer")
reduce_genes.by.reactome.pathway<-scPagwas::reduce_pathway(pathway_seed=names(genes.by.reactome.pathway)[sample(1:length(genes.by.reactome.pathway),500)],
pathway_list=genes.by.reactome.pathway,
remove_proporion=0.6)
pkgdown::build_site()
