Single_data
Single_data
gene_matrix <- GetAssayData(Single_data, slot = "data", assay = 'RNA')
dim(gene_matrix)
rownames(gene_matrix)
genes<-intersect(rownames(Single_data),rownames(gene_matrix))
df_gene <- data.frame(
gene = genes,
var = apply(gene_matrix[genes,],1,var)
)
gene_matrix<-gene_matrix[genes,]
rownames(df_gene) <- df_gene$gene
v_var_ratio_c2t <- rep(1, iters_singlecell)
for (i_ctrl in 1:iters_singlecell) {
v_var_ratio_c2t[i_ctrl] <- sum(df_gene[dic_ctrl_list[[i_ctrl]], "var"])
}
devtools::load_all(".")
correct_pdf<-Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=iters_singlecell,
n_topgenes=n_topgenes,
scPagwas_topgenes=scPagwas_topgenes
)
Pagwas$Random_Correct_BG_pdf <- correct_pdf
Pagwas$Merged_celltype_pvalue<-Merge_celltype_p(single_p=correct_pdf$adj_p,celltype=Pagwas$Celltype_anno$annotation)
correct_pdf$adj_p
correct_pdf
Single_data
gene_matrix <- GetAssayData(Single_data, slot = "data", assay = 'RNA')
mat_ctrl_raw_score <- matrix(0, nrow =ncol(gene_matrix), ncol = iters_singlecell)
mat_ctrl_raw_score
dic_ctrl_list <- list()
for (i in 1:iters_singlecell) {
#随机抽取基因集
print(i)
set.seed(i)
dic_ctrl_list[[i]] <- sample(rownames(Single_data), n_topgenes)
#计算每个样本的control分数
Single_data<-Seurat::AddModuleScore(Single_data,
assay = 'RNA',
list(dic_ctrl_list[[i]]),
name = c("contr_genes")
)
#将每个样本的control分数放入矩阵中
mat_ctrl_raw_score[, i] <-Single_data$contr_genes1
Single_data$contr_genes1<-NULL
}
dic_ctrl_list
genes<-intersect(rownames(Single_data),rownames(gene_matrix))
gene_matrix<-gene_matrix[genes,]
df_gene <- data.frame(
gene = genes,
var = apply(gene_matrix,1,var)
)
head(df_gene)
rownames(df_gene) <- df_gene$gene
v_var_ratio_c2t <- rep(1, iters_singlecell)
for (i_ctrl in 1:iters_singlecell) {
v_var_ratio_c2t[i_ctrl] <- sum(df_gene[dic_ctrl_list[[i_ctrl]], "var"])
}
v_var_ratio_c2t <- v_var_ratio_c2t / sum(df_gene[scPagwas_topgenes, "var"])
v_var_ratio_c2t
scPagwas_topgenes
df_gene
sum(df_gene[scPagwas_topgenes, "var"]
)
head(df_gene)
scPagwas_topgenes
length(intersect(scPagwas_topgenes,genes))
CellScalepValue <- scGene_scaleP(
Single_mat = Pagwas$data_mat[scPagwas_topgenes, ]
)
dim(Pagwas$data_mat)
genes<-intersect(rownames(Single_data),rownames(gene_matrix))
scPagwas_topgenes<-intersect(scPagwas_topgenes,genes)
gene_matrix<-gene_matrix[genes,]
df_gene <- data.frame(
gene = genes,
var = apply(gene_matrix,1,var)
)
rownames(df_gene) <- df_gene$gene
v_var_ratio_c2t <- rep(1, iters_singlecell)
for (i_ctrl in 1:iters_singlecell) {
v_var_ratio_c2t[i_ctrl] <- sum(df_gene[dic_ctrl_list[[i_ctrl]], "var"])
}
v_var_ratio_c2t <- v_var_ratio_c2t / sum(df_gene[scPagwas_topgenes, "var"])
v_var_ratio_c2t
correct_pdf<-correct_background(
scPagwas.TRS.Score,
mat_ctrl_raw_score,
v_var_ratio_c2t
)
head(correct_pdf)
devtools::load_all(".")
if(Correct_BG_p){
message("* Get Random Correct background pvalue for each single cell!")
correct_pdf<-Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=iters_singlecell,
n_topgenes=n_topgenes,
scPagwas_topgenes=scPagwas_topgenes
)
Pagwas$Random_Correct_BG_pdf <- correct_pdf
Pagwas$Merged_celltype_pvalue<-Merge_celltype_p(single_p=correct_pdf$pooled_p,celltype=Pagwas$Celltype_anno$annotation)
}
devtools::load_all(".")
correct_pdf<-Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=iters_singlecell,
n_topgenes=n_topgenes,
scPagwas_topgenes=scPagwas_topgenes
)
devtools::load_all(".")
correct_pdf<-Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=iters_singlecell,
n_topgenes=n_topgenes,
scPagwas_topgenes=scPagwas_topgenes
)
library(scPagwas)
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
pa_method='SVD',
iters_singlecell = 100,
Correct_BG_p=TRUE,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Sat Apr 15 16:19:12 2023 ------##
##------ Sat Apr 15 16:19:16 2023 ------##
##------ Sat Apr 15 16:19:28 2023 ------##
##------ Sat Apr 15 16:19:29 2023 ------##
##------ Sat Apr 15 16:19:29 2023 ------##
##------ Sat Apr 15 16:19:30 2023 ------##
##------ Sat Apr 15 16:21:18 2023 ------##
##------ Sat Apr 15 16:21:19 2023 ------##
##------ Sat Apr 15 16:21:24 2023 ------##
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
pa_method='NMF',
iters_singlecell = 100,
Correct_BG_p=TRUE,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Sat Apr 15 16:25:32 2023 ------##
##------ Sat Apr 15 16:25:36 2023 ------##
devtools::document()
usethis::use_version()
usethis::use_pkgdown()
library(scPagwas)
devtools::document()
library(scPagwas)
devtools::load_all(".")
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
iters_singlecell = 100,
Correct_BG_p=TRUE,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
##------ Wed Apr 19 09:22:41 2023 ------##
##------ Wed Apr 19 09:22:46 2023 ------##
##------ Wed Apr 19 09:23:13 2023 ------##
##------ Wed Apr 19 09:23:13 2023 ------##
##------ Wed Apr 19 09:23:13 2023 ------##
##------ Wed Apr 19 09:23:14 2023 ------##
##------ Wed Apr 19 09:23:30 2023 ------##
##------ Wed Apr 19 09:23:34 2023 ------##
##------ Wed Apr 19 09:23:37 2023 ------##
library(scPagwas)
devtools::document()
library(scPagwas)
devtools::load_all(".")
Pagwas =NULL
gwas_data = "D:/tempdata/monocytecount_prune_gwas_data.txt"
Single_data ="D:/tempdata/Pagwas_pbmc_realgroundtruth.rds"
output.prefix="reactome"
output.dirs="real_reduce_reactome"
load("D:/OneDrive/GWAS_Multiomics/Manuscripts/Revise_comments/pathway_add/reduce_genes.by.reactome.pathway.RData")
Pathway_list=reduce_genes.by.regulatory.pathway
Pathway_list=reduce_genes.by.reactome.pathway
Pagwas <- list()
Single_data <- readRDS(Single_data)
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
Pagwas =NULL
gwas_data = "D:/tempdata/monocytecount_prune_gwas_data.txt"
Single_data ="D:/tempdata/Pagwas_pbmc_realgroundtruth.rds"
output.prefix="reactome"
output.dirs="real_reduce_reactome"
load("D:/OneDrive/GWAS_Multiomics/Manuscripts/Revise_comments/pathway_add/reduce_genes.by.reactome.pathway.RData")
Pathway_list=reduce_genes.by.reactome.pathway
assay="RNA"
singlecell=T
celltype=F
block_annotation = block_annotation
chrom_ld = chrom_ld
assay = "RNA"
run_split=FALSE
n.cores=1
marg = 10000
pa_method = "SVD"
maf_filter = 0.01
min_clustercells = 10
min.pathway.size = 5
max.pathway.size = 300
iters_singlecell = 100
iters_celltype = 200
n_topgenes = 1000
seurat_return = TRUE
remove_outlier = TRUE
Pagwas <- list()
Single_data <- readRDS(Single_data)
Pagwas <- Single_data_input(
Pagwas = Pagwas,
assay = assay,
# nfeatures =nfeatures,
Single_data = Single_data,
Pathway_list = Pathway_list,
min_clustercells = min_clustercells
)
Single_data
library(scPagwas)
devtools::load_all(".")
Pagwas =NULL
gwas_data = "D:/tempdata/monocytecount_prune_gwas_data.txt"
Single_data ="D:/tempdata/sim_data_8.16.rds"
output.prefix="gobp"
output.dirs="real_reduce_gobp"
load("D:/OneDrive/GWAS_Multiomics/Manuscripts/Revise_comments/pathway_add/reduce_genes.by.gobp.pathway.RData")
Pathway_list=reduce_genes.by.gobp.pathway
assay="RNA"
singlecell=T
celltype=F
block_annotation = block_annotation
chrom_ld = chrom_ld
assay = "RNA"
run_split=FALSE
n.cores=1
marg = 10000
pa_method = "SVD"
maf_filter = 0.01
min_clustercells = 10
min.pathway.size = 5
max.pathway.size = 300
iters_singlecell = 100
iters_celltype = 200
n_topgenes = 1000
seurat_return = TRUE
remove_outlier = TRUE
Pagwas <- list()
Single_data <- readRDS(Single_data)
Pagwas <- Single_data_input(
Pagwas = Pagwas,
assay = assay,
# nfeatures =nfeatures,
Single_data = Single_data,
Pathway_list = Pathway_list,
min_clustercells = min_clustercells
)
}
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
if (is.null(Pathway_list)) {
stop("not loaded Pathway_list data")
}
if (!("list" %in% class(Pathway_list))) {
stop("not loaded the list format of Pathway_list data")
}
# filter the pathway length
Pa.len <- unlist(lapply(Pathway_list, function(Pa) length(Pa)))
Pathway_list <- Pathway_list[names(Pathway_list)[Pa.len >= min.pathway.size &
Pa.len <= max.pathway.size]]
# Valid the total genes of pathway.
pa_gene <- unique(unlist(Pathway_list))
if (length(intersect(Pagwas$VariableFeatures, pa_gene)) < length(pa_gene) * 0.1) {
stop("There are less 10% intersect genes between Single_data and
Pathway_list, please check the gene names or change the nfeatures")
}
# filter the scarce pathway
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa,
Pagwas$VariableFeatures
))
}
)) > 2
)]
Pathway_list <- Pathway_list[pana]
# keep the raw pathway
Pagwas$rawPathway_list <- Pathway_list
# filter the gene for no expression in single cells in pathway
celltypes <- as.vector(unique(Pagwas$Celltype_anno$annotation))
pana_list <- lapply(celltypes, function(celltype) {
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
scCounts <- as_matrix(scCounts)
scCounts <- scCounts[rowSums(scCounts) != 0, ]
proper.gene.names <- rownames(scCounts)
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa, proper.gene.names
))
}
)) > 2
)]
return(pana)
})
Pagwas$Pathway_list <- Pathway_list[Reduce(intersect, pana_list)]
Pagwas$rawPathway_list <- Pathway_list[Reduce(intersect, pana_list)]
message("* Start to get Pathway SVD socre!")
pb <- txtProgressBar(style = 3)
scPCAscore_list <- lapply(celltypes, function(celltype) {
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
scCounts <- as_matrix(scCounts)
#
scPCAscore <- PathwayPCAtest(
Pathway_list = Pagwas$Pathway_list,
scCounts = scCounts
)
setTxtProgressBar(pb, which(celltypes == celltype) / length(celltypes))
print(celltype)
return(scPCAscore)
})
close(pb)
pa_remove<-unique(unlist(lapply(
seq_len(length(scPCAscore_list)), function(i) {
scPCAscore_list[[i]][[3]]
})))
pa_remove
pca_df <- lapply(seq_len(length(scPCAscore_list)), function(i) {
df <- scPCAscore_list[[i]][[1]]
if(length(pa_remove)!=0){
df<-df[df$name != pa_remove,]
}
df$celltype <- rep(celltypes[i], nrow(df))
return(df)
})
pca_df <- Reduce(function(dtf1, dtf2) rbind(dtf1, dtf2), pca_df)
pca_scoremat <- reshape2::dcast(
pca_df[, c("name", "celltype", "score")], name ~ celltype
)
dim(pca_scoremat)
rm(pca_df)
rownames(pca_scoremat) <- pca_scoremat$name
if (dim(pca_scoremat)[2] == 2) {
pca_cell_df <- data.matrix(pca_scoremat[, -1])
} else {
pca_cell_df <- pca_scoremat[, -1]
}
rownames(pca_cell_df) <- pca_scoremat$name
colnames(pca_cell_df) <- colnames(pca_scoremat)[-1]
rm(pca_scoremat)
index <- !is.na(pca_cell_df[1, ])
if (sum(index) < ncol(pca_cell_df)) {
message(colnames(pca_cell_df)[!index], " have no information, delete!")
pca_cell_df <- pca_cell_df[, index]
}
pca_scCell_mat <- bigreadr::cbind_df(lapply(seq_len(length(scPCAscore_list)), function(i) {
df<-scPCAscore_list[[i]][[2]]
if(length(pa_remove)!=0){
df<-df[rownames(df) != pa_remove,]
}
return(df)
}))
length(scPCAscore_list)
length(scPCAscore_list)
pca_scCell_mat <- bigreadr::cbind_df(lapply(seq_len(length(scPCAscore_list)), function(i) {
df<-scPCAscore_list[[i]][[2]]
if(length(pa_remove)!=0){
df<-df[rownames(df) != pa_remove,]
}
return(df)
}))
i<-1
i
df<-scPCAscore_list[[i]][[2]]
df
dim(df)
df<-scPCAscore_list[[i]][[2]]
if(length(pa_remove)!=0){
df<-df[rownames(df) != pa_remove,]
}
dim(df)
rownames(df)
rownames(df) != pa_remove
pa_remove
rownames(df)
rownames(df) != pa_remove
pa_remove
pca_scCell_mat <- bigreadr::cbind_df(lapply(seq_len(length(scPCAscore_list)), function(i) {
df<-scPCAscore_list[[i]][[2]]
pa<-setdiff(rownames(df),pa_remove)
if(length(pa_remove)!=0){
df<-df[pa,]
}
return(df)
}))
dim(pca_scCell_mat)
devtools::load_all(".")
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
suppressMessages(gwas_data <- bigreadr::fread2(gwas_data))
gwas_data
gwas_data<-"D:/tempdata/TimeMemoryTest/bloodtraits/monocytecount_prune_gwas_data.txt"
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = maf_filter
)
suppressMessages(gwas_data <- bigreadr::fread2(gwas_data))
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = maf_filter
)
Pagwas$snp_gene_df <- SnpToGene(
gwas_data = Pagwas$gwas_data,
block_annotation = block_annotation,
marg = marg
)
Pagwas <- Pathway_annotation_input(
Pagwas = Pagwas,
block_annotation = block_annotation
)
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=n.cores
)
getwd()
output.dirs
if (!dir.exists(output.dirs)) {
dir.create(output.dirs)
}
if (!dir.exists(output.dirs)) {
dir.create(paste0("./", output.dirs, "/temp"))
}
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=n.cores
)
library(scPagwas)
devtools::document()
library(scPagwas)
scParameter_regression
?scale_colour_gradient2
