p_names=rownames(Pagwas@misc$bootstrap_results)[-1],
figurenames = "Bootstrap_P_Barplot.pdf",
width = 5,
height = 7,
do_plot=T,
title = "monocytecount_bmmc")
Bootstrap_estimate_Plot(Pagwas=Pagwas,
width = 9,
height = 7,
do_plot=T)
Pagwas@misc$bootstrap_results
Bootstrap_estimate_Plot(bootstrap_results=Pagwas@misc$bootstrap_results,
figurenames = "estimateplot.pdf",
width = 9,
height = 7,
do_plot=T)
sessionInfo()
library(scPagwas)
Pagwas<-scPagwas_main(Pagwas =NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
output.prefix="Test",
output.dirs="Test",
Pathway_list=Genes_by_pathway_kegg,
assay="RNA",
singlecell=T,
iters_singlecell = 100,
celltype=T,
block_annotation = block_annotation,
chrom_ld = chrom_ld)
##------ Mon May 29 15:47:16 2023 ------##
##------ Mon May 29 15:47:22 2023 ------##
##------ Mon May 29 15:47:44 2023 ------##
##------ Mon May 29 15:47:44 2023 ------##
##------ Mon May 29 15:47:44 2023 ------##
##------ Mon May 29 15:47:45 2023 ------##
##------ Mon May 29 15:48:13 2023 ------##
##------ Mon May 29 15:48:15 2023 ------##
##------ Mon May 29 15:48:18 2023 ------##
names(Pagwas)
Pagwas
Pagwas_celltypes<-scPagwas_main(Pagwas =NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
output.prefix="Test",
output.dirs="Test",
Pathway_list=Genes_by_pathway_kegg,
assay="RNA",
singlecell=F,
celltype=T,
block_annotation = block_annotation,
chrom_ld = chrom_ld)
##------ Mon May 29 16:13:03 2023 ------##
##------ Mon May 29 16:13:06 2023 ------##
##------ Mon May 29 16:13:22 2023 ------##
##------ Mon May 29 16:13:22 2023 ------##
##------ Mon May 29 16:13:23 2023 ------##
##------ Mon May 29 16:13:23 2023 ------##
##------ Mon May 29 16:13:26 2023 ------##
names(Pagwas_celltypes)
library(scPagwas)
Pagwas <- list()
Single_data <- readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
Pagwas <- Single_data_input(
Pagwas = Pagwas,
assay = "RNA",
Single_data = Single_data,
Pathway_list = Genes_by_pathway_kegg
)
Single_data <- Single_data[, colnames(Pagwas$data_mat)]
names(Pagwas)
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Genes_by_pathway_kegg
)
names(Pagwas)
gwas_data <- bigreadr::fread2(system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"))
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = 0.1
)
names(Pagwas)
Pagwas$snp_gene_df <- SnpToGene(
gwas_data = Pagwas$gwas_data,
block_annotation = block_annotation,
marg = 10000
)
Pagwas <- Pathway_annotation_input(
Pagwas = Pagwas,
block_annotation = block_annotation
)
names(Pagwas)
Pagwas$pathway_blocks[1:2]
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = T,
celltype = T,
backingpath="./temp")
names(Pagwas)
Pagwas$Pathway_sclm_results
head(Pagwas$Pathway_sclm_results)
dim(Pagwas$Pathway_sclm_results)
head(Pagwas$Pathway_ld_gwas_data)
Pagwas$lm_results <- Pagwas_perform_regression(Pathway_ld_gwas_data = Pagwas$Pathway_ld_gwas_data)
Pagwas <- Boot_evaluate(Pagwas, bootstrap_iters = 200, part = 0.5)
names(Pagwas)
Pagwas$lm_results
Pagwas <- scPagwas_perform_score(
Pagwas = Pagwas,
remove_outlier = TRUE
)
names(Pagwas)
head(Pagwas$Pathway_single_results)
head(Pagwas$scPathways_rankPvalue)
Pagwas$gene_heritability_correlation <- scGet_gene_heritability_correlation(scPagwas.gPAS.score=Pagwas$scPagwas.gPAS.score,
data_mat=Pagwas$data_mat)
Pagwas$gene_heritability_correlation
dim(Pagwas$gene_heritability_correlation)
scPagwas_topgenes <- names(Pagwas$gene_heritability_correlation[order(Pagwas$gene_heritability_correlation, decreasing = T), ])[1:1000]
Single_data <- Seurat::AddModuleScore(Single_data, assay = "RNA", list(scPagwas_topgenes), name = c("scPagwas.TRS.Score"))
correct_pdf<-Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=100,
n_topgenes=1000,
scPagwas_topgenes=scPagwas_topgenes)
head(correct_pdf)
Pagwas$Merged_celltype_pvalue<-Merge_celltype_p(single_p=correct_pdf$pooled_p,celltype=Pagwas$Celltype_anno$annotation)
Pagwas$Merged_celltype_pvalue
devtools::load_all(".")
library(scPagwas)
Pagwas <- list()
#Input and preprocess the single-cell data
Single_data <- readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
Pagwas <- Single_data_input(
Pagwas = Pagwas,
assay = "RNA",
Single_data = Single_data,
Pathway_list = Genes_by_pathway_kegg
)
Single_data <- Single_data[, colnames(Pagwas$data_mat)]
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Genes_by_pathway_kegg
)
Pagwas <- pa_meanexpr(Pagwas)
save(Pagwas,file="./single.pagwas.RData")
n=2
an<-ncol(Pagwas$pca_scCell_mat)
m=an/n
m=floor(m)
pca_scCell_mat<-Pagwas$pca_scCell_mat
data_mat<-Pagwas$data_mat
#Here's an example code snippet to loop through and output each partitioned data:
for (i in 1:n) {
if(i*m > an){
Pagwas$pca_scCell_mat=pca_scCell_mat[,((i-1)*m+1):an]
Pagwas$data_mat=data_mat[,((i-1)*m+1):(i*m)]
}else{
Pagwas$pca_scCell_mat=pca_scCell_mat[,((i-1)*m+1):(i*m)]
Pagwas$data_mat=data_mat[,((i-1)*m+1):(i*m)]
}
save(Pagwas,file=paste0(i,"_Pagwas_singledata.RData"))
}
gwasfile= system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas")
out_file= "./gwas_pagwas.RData"
Pagwas<-list()
gwas_data <- bigreadr::fread2(gwasfile)
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data
)
Pagwas$snp_gene_df <- SnpToGene(gwas_data = Pagwas$gwas_data,
block_annotation = block_annotation,
marg = 10000)
save(Pagwas,file=out_file)
gwas_path <- "gwas_pagwas.RData"
scmat_path <- "1_Pagwas_singledata.RData"
#Import and integrate the two data results into a single list.
load(gwas_path)
Pagwas1<-Pagwas
rm(Pagwas)
load(scmat_path)
Pagwas<- c(Pagwas1,Pagwas)
rm(Pagwas1)
gc()
output.prefix='1'
output.dirs='Test'
if (!dir.exists(output.dirs)) {
dir.create(output.dirs)
}
if (!dir.exists(output.dirs)) {
dir.create(paste0("./", output.dirs, "/temp"))
}
Pagwas <- Pathway_annotation_input(
Pagwas = Pagwas,
block_annotation = block_annotation
)
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = T,
celltype = F,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=1
)
pmat<-Pagwas$Pathway_sclm_results
save(pmat,file=paste0("./", output.dirs, "/1_Pathwa
y_sclm_results.RData"))
save(pmat,file=paste0("./", output.dirs, "/1_Pathway_sclm_results.RData"))
scmat_path <- "2_Pagwas_singledata.RData"
output.prefix='2'
load(gwas_path)
Pagwas1<-Pagwas
rm(Pagwas)
load(scmat_path)
Pagwas<- c(Pagwas1,Pagwas)
rm(Pagwas1)
gc()
if (!dir.exists(output.dirs)) {
dir.create(output.dirs)
}
if (!dir.exists(output.dirs)) {
dir.create(paste0("./", output.dirs, "/temp"))
}
Pagwas <- Pathway_annotation_input(
Pagwas = Pagwas,
block_annotation = block_annotation
)
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = T,
celltype = F,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=1
)
pmat<-Pagwas$Pathway_sclm_results
save(pmat,file=paste0("./", output.dirs, "/",output.prefix,"_Pathway_sclm_results.RData"))
load("1_Pathway_sclm_results.RData")
load(paste0("./", output.dirs, "1_Pathway_sclm_results.RData"))
load(paste0("./", output.dirs, "/1_Pathway_sclm_results.RData"))
n=2
pmat_merge<-pmat
for (i in 2:n) {
print(i)
load(paste0(i,"_Pathway_sclm_results.RData"))
pmat_merge<-rbind(pmat_merge,pmat)
}
for (i in 2:n) {
print(i)
load(paste0("./", output.dirs, "/",i,"_Pathway_sclm_results.RData"))
pmat_merge<-rbind(pmat_merge,pmat)
}
dim(pmat_merge)
save(pmat_merge,file="Pathway_sclm_results.RData")
devtools::load_all(".")
devtools::load_all(".")
scPagwas.gPAS.score <- Merge_gPas(Pagwas,pmat_merge)
devtools::load_all(".")
devtools::load_all(".")
scPagwas.gPAS.score <- Merge_gPas(Pagwas,pmat_merge)
Pagwas
names(Pagwas)
load("single.pagwas.RData")
load("pmat_merge.RData")
getwd()
save(pmat_merge,file="pmat_merge.RData")
load("single.pagwas.RData")
load("pmat_merge.RData")
#compute the gPas score.
scPagwas.gPAS.score <- Merge_gPas(Pagwas,pmat_merge)
gene_heritability_correlation<-Corr_Random(Pagwas$data_mat,scPagwas.gPAS.score,seed=1234,random=T,Nrandom=5,Nselect=200)
scPagwas_topgenes <- names(gene_heritability_correlation[order(gene_heritability_correlation, decreasing = T)])[1:500]
Single_data <- Seurat::AddModuleScore(Single_data,
assay = 'RNA',
list(scPagwas_topgenes),
name = c("scPagwas.TRS.Score")
)
correct_pdf <- scPagwas::Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=100,
n_topgenes=500,
scPagwas_topgenes=scPagwas_topgenes)
Pagwas$Random_Correct_BG_pdf <- correct_pdf
Pagwas$Merged_celltype_pvalue<-scPagwas::Merge_celltype_p(single_p=correct_pdf$pooled_p,
celltype=Pagwas$Celltype_anno$annotation)
Pagwas$Merged_celltype_pvalue
library(Seurat)
scRNAexample <-readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
#set the number of split time, it depend on the size of your single cell data.
#There have two form of spliting the data:
#Create the random index number.
n_split=2
Split_index <- rep(1:n_split, time = ceiling(ncol(scRNAexample)/n_split), length = ncol(scRNAexample))
for (i in 1:n_split) {
Example_splice <- scRNAexample[,Split_index==i]
saveRDS(Example_splice,file = paste0(set.dirs,"Example_splice",i,".rds"))
}
for (i in 1:n_split) {
Example_splice <- scRNAexample[,Split_index==i]
saveRDS(Example_splice,file = paste0("Example_splice",i,".rds")
}
for (i in 1:n_split) {
Example_splice <- scRNAexample[,Split_index==i]
saveRDS(Example_splice,file = paste0("Example_splice",i,".rds")
}
for (i in 1:n_split) {
Example_splice <- scRNAexample[,Split_index==i]
saveRDS(Example_splice,file = paste0("Example_splice",i,".rds"))
}
Pagwas<-list()
gwas_data <- bigreadr::fread2(system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"))
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data
)
Pagwas$snp_gene_df <- SnpToGene(gwas_data = Pagwas$gwas_data,
block_annotation = block_annotation, marg = 10000)
names(Pagwas)
for (i in 1:n_split) {
scPagwas_main(Pagwas =Pagwas,
gwas_data =NULL,
Single_data = paste0(set.dirs,"Example_splice",i,".rds"), #the
output.prefix=i, #the prefix can be the circulation coefficient i.
output.dirs="splice_scPagwas", #the output.dirs shoukd be the same for each circulation
Pathway_list=Genes_by_pathway_kegg,
run_split=TRUE, #You must set the key parameter.This parameter is set to run single result for each split result.
min_clustercells=10, #the minimum cluster cell number should be 1.
assay="RNA",
block_annotation = block_annotation,
chrom_ld = chrom_ld)
gc()
}
for (i in 1:n_split) {
scPagwas_main(Pagwas =Pagwas,
gwas_data =NULL,
Single_data = paste0("Example_splice",i,".rds"), #the
output.prefix=i, #the prefix can be the circulation coefficient i.
output.dirs="splice_scPagwas", #the output.dirs shoukd be the same for each circulation
Pathway_list=Genes_by_pathway_kegg,
run_split=TRUE, #You must set the key parameter.This parameter is set to run single result for each split result.
min_clustercells=10, #the minimum cluster cell number should be 1.
assay="RNA",
block_annotation = block_annotation,
chrom_ld = chrom_ld)
gc()
}
##------ Tue May 30 16:16:41 2023 ------##
##------ Tue May 30 16:16:41 2023 ------##
##------ Tue May 30 16:16:52 2023 ------##
##------ Tue May 30 16:16:52 2023 ------##
##------ Tue May 30 16:16:52 2023 ------##
##------ Tue May 30 16:17:10 2023 ------##
##------ Tue May 30 16:17:12 2023 ------##
##------ Tue May 30 16:17:17 2023 ------##
##------ Tue May 30 16:17:17 2023 ------##
##------ Tue May 30 16:17:27 2023 ------##
##------ Tue May 30 16:17:27 2023 ------##
##------ Tue May 30 16:17:28 2023 ------##
##------ Tue May 30 16:17:41 2023 ------##
##------ Tue May 30 16:17:44 2023 ------##
Single_data = scRNAexample
output.dirs="splice_scPagwas"
proportion=0.3
random_times=10
iters_singlecell=500
if (class(Single_data) == "character") {
if (grepl(".rds", Single_data)) {
message("** Start to read the single cell data!")
Single_data <- readRDS(Single_data)
} else {
stop("Error:There is need a data in `.rds` format ")
}
} else if (class(Single_data) != "Seurat") {
stop("Error:There is need a Seurat class for Single_data")
}
if (!assay %in% Seurat::Assays(Single_data)) {
stop("Error:There is no need assays in your Single_data")
}
assay='RNA'
oriDir <- paste0(getwd(),"./",output.dirs)
files <- list.files(oriDir, pattern="*_singlecell_scPagwas.gPAS.score.Result.csv")
files
scPagwas.gPAS.score<-unlist(lapply( files,function(file){
gs<-read.csv(file=paste0(oriDir,"/",file))
ga <- gs$scPagwas.gPAS.score
names(ga) <- gs$cellnames
return(ga)
}))
ins<-intersect(names(scPagwas.gPAS.score),colnames(Single_data))
Single_data <- Single_data[,names(scPagwas.gPAS.score)]
Single_data$scPagwas.gPAS.score<-scPagwas.gPAS.score
random
random=FALSE
scPagwas.gPAS.score <- data.matrix(Single_data$scPagwas.gPAS.score)
sparse_cor <- corSparse(
X = t(as_matrix(GetAssayData(Single_data, slot = "data", assay = "RNA"))),
Y = scPagwas.gPAS.score
)
colnames(sparse_cor) <- "gene_heritability_correlation"
sparse_cor[is.nan(sparse_cor)] <- 0
Single_data@misc$gene_heritability_correlation <- sparse_cor
scPagwas_topgenes <- names(sparse_cor[order(sparse_cor, decreasing = T), ])[1:n_topgenes]
n_topgenes = 1000
scPagwas_topgenes <- names(sparse_cor[order(sparse_cor, decreasing = T), ])[1:n_topgenes]
Single_data <- Seurat::AddModuleScore(Single_data,
assay = "RNA",
list(scPagwas_topgenes),
name = c("scPagwas.TRS.Score")
)
gene_heritability_correlation<-scPagwas::Corr_Random(Pagwas$data_mat,
scPagwas.gPAS.score,
seed=seed,
random=T,
Nrandom=random_times,
Nselect=Nselect)
devtools::load_all(".")
gene_heritability_correlation<-scPagwas::Corr_Random(Pagwas$data_mat,
scPagwas.gPAS.score,
seed=seed,
random=T,
Nrandom=random_times,
Nselect=Nselect)
gene_heritability_correlation<-Corr_Random(Pagwas$data_mat,
scPagwas.gPAS.score,
seed=seed,
random=T,
Nrandom=random_times,
Nselect=Nselect)
seed=1234
gene_heritability_correlation<-Corr_Random(Pagwas$data_mat,
scPagwas.gPAS.score,
seed=seed,
random=T,
Nrandom=random_times,
Nselect=Nselect)
Nselect=10000
gene_heritability_correlation<-Corr_Random(Pagwas$data_mat,
scPagwas.gPAS.score,
seed=seed,
random=T,
Nrandom=random_times,
Nselect=Nselect)
dim(Pagwas$data_mat)
files <- list.files(pattern="*_singlecell_scPagwas.gPAS.score.Result.csv")
files
output.dirs="splice_scPagwas"
oriDir <- paste0(getwd(),"./",output.dirs)
files <- list.files(oriDir, pattern="*_singlecell_scPagwas.gPAS.score.Result.csv")
#integrate the scPagwas.gPAS.score
scPagwas.gPAS.score<-unlist(lapply( files,function(file){
gs<-read.csv(file=paste0(oriDir,"/",file))
ga <- gs$scPagwas.gPAS.score
names(ga) <- gs$cellnames
return(ga)
}))
Single_data <- Single_data[,names(scPagwas.gPAS.score)]
Single_data$scPagwas.gPAS.score<-scPagwas.gPAS.score
gene_heritability_correlation<-scPagwas::Corr_Random(Pagwas$data_mat,
scPagwas.gPAS.score,
seed=1234,
random=T,
Nrandom=5,
Nselect=200)
gene_heritability_correlation<-Corr_Random(Pagwas$data_mat,
scPagwas.gPAS.score,
seed=1234,
random=T,
Nrandom=5,
Nselect=200)
data_mat <- GetAssayData(Single_data, slot = "data", assay = "RNA")
gene_heritability_correlation<-scPagwas::Corr_Random(data_mat,
scPagwas.gPAS.score,
seed=1234,
random=T,
Nrandom=5,
Nselect=200)
gene_heritability_correlation<-Corr_Random(data_mat,
scPagwas.gPAS.score,
seed=1234,
random=T,
Nrandom=5,
Nselect=200)
scPagwas_topgenes <- names(gene_heritability_correlation[order(gene_heritability_correlation, decreasing = T)])[1:500]
Single_data <- Seurat::AddModuleScore(Single_data,
assay = 'RNA',
list(scPagwas_topgenes),
name = c("scPagwas.TRS.Score")
)
correct_pdf <- scPagwas::Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=100,
n_topgenes=500,
scPagwas_topgenes=scPagwas_topgenes)
Pagwas$scPagwas.TRS.Score = Single_data$scPagwas.TRS.Score1
Pagwas$Random_Correct_BG_pdf <- correct_pdf
Pagwas$Merged_celltype_pvalue<-scPagwas::Merge_celltype_p(single_p=correct_pdf$pooled_p,
celltype=Pagwas$Celltype_anno$annotation)
Pagwas$Celltype_anno$annotation
Idents(Single_data)
Pagwas$Merged_celltype_pvalue<-scPagwas::Merge_celltype_p(single_p=correct_pdf$pooled_p,
celltype=Idents(Single_data))
Pagwas$Merged_celltype_pvalue
a <- data.frame(
scPagwas.TRS.Score = Single_data$scPagwas.TRS.Score1,
scPagwas.gPAS.score = scPagwas.gPAS.score,
Random_Correct_BG_p = correct_pdf$pooled_p,
Random_Correct_BG_adjp = correct_pdf$adj_p,
Random_Correct_BG_z = correct_pdf$pooled_z)
a
